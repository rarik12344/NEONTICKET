import { NextApiRequest, NextApiResponse } from 'next';
import { ethers } from 'ethers';
import { CONFIG } from '../../config';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const body = req.body;
    const buttonIndex = body.untrustedData.buttonIndex;
    const fid = body.untrustedData.fid;
    const inputText = body.untrustedData.inputText || '';

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    switch (buttonIndex) {
      case 1: // –ö–Ω–æ–ø–∫–∞ "Buy Ticket"
        const txHash = await processTicketPurchase(fid);
        return res.status(200).json({
          type: 'frame',
          frame: {
            version: 'vNext',
            image: `${CONFIG.hostUrl}/api/frame/success?tx=${txHash}`,
            buttons: [
              {
                label: 'üéâ View on Explorer',
                action: 'link',
                target: `${CONFIG.baseExplorerUrl}/tx/${txHash}`
              },
              {
                label: 'üîÑ New Round',
                action: 'post'
              }
            ],
            postUrl: `${CONFIG.hostUrl}/api/frame`
          }
        });

      default:
        return res.status(200).json({
          type: 'frame',
          frame: {
            version: 'vNext',
            image: `${CONFIG.hostUrl}/api/frame/default`,
            buttons: [
              {
                label: 'üé´ Buy Ticket',
                action: 'post'
              }
            ],
            postUrl: `${CONFIG.hostUrl}/api/frame`
          }
        });
    }
  } catch (error) {
    console.error('Frame error:', error);
    return res.status(200).json({
      type: 'frame',
      frame: {
        version: 'vNext',
        image: `${CONFIG.hostUrl}/api/frame/error`,
        buttons: [
          {
            label: 'üîÑ Try Again',
            action: 'post'
          }
        ],
        postUrl: `${CONFIG.hostUrl}/api/frame`
      }
    });
  }
}

async function processTicketPurchase(fid: number): Promise<string> {
  // –ó–¥–µ—Å—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–∞–∫—Ç
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  return '0x123...abc';
}
